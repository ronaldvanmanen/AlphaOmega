plugins {
    id "com.diffplug.spotless" version "6.25.0"
    id 'org.graalvm.buildtools.native' version '0.10.3'
    id 'org.springframework.boot' version '3.3.4'
    id 'info.solidsoft.pitest' version '1.15.0'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
    id 'java'
    id 'test-report-aggregation'
}

group = 'com.ragnvaldr'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

ext {
    set('springShellVersion', '3.3.2')
}

dependencies {
    compileOnly 'org.jetbrains:annotations:23.0.0'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'org.pitest:pitest:1.17.0'
    implementation 'org.pitest:pitest-junit5-plugin:1.2.1'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:3.3.4'
    implementation 'org.springframework.shell:spring-shell-starter:3.3.3'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.3.4'
    testImplementation 'org.springframework.shell:spring-shell-starter-test:3.3.3'
    testImplementation 'net.jqwik:jqwik:1.9.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.11.0'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.shell:spring-shell-dependencies:${springShellVersion}"
    }
}

tasks.named('pitest') {
    dependsOn('build')
}

test {
    useJUnitPlatform
    {
        includeEngines 'jqwik', 'junit-jupiter'
    }

    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat 'full'
        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams false
    }

    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = '0.8.12'
}

jacocoTestReport {
    reports {
        xml.required = true
    }
    dependsOn test
}

pitest {
    pitestVersion = '1.17.0'
    outputFormats = ['XML', 'HTML']
    exportLineCoverage = true
}

spotless {
    format 'misc', {
        target '*.gradle', '.gitattributes', '.gitignore'

        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }

    java {
        target 'src/main/java/**/*.java', 'src/test/java/**/*.java'

        licenseHeaderFile rootProject.file('gradle/spotless/license.java')
        importOrder('java', 'javax', 'com', 'org', '', '\\#')
        removeUnusedImports()

        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
}
